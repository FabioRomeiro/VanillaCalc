{"version":3,"sources":["services/ConnectionFactory.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","stores","dbName","version","connection","close","ConnectionFactory","this","Error","value","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","e","_createStores","result","onsuccess","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":"AAAA,aAEA,IAAIA,aAAe,WAAc,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,IAAIE,EAAaH,EAAMC,GAAIE,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,OAAO,SAAUO,EAAaC,EAAYC,GAAiJ,OAA9HD,GAAYb,EAAiBY,EAAYG,UAAWF,GAAiBC,GAAad,EAAiBY,EAAaE,GAAqBF,GAA7gB,GAEnB,SAASI,gBAAgBC,EAAUL,GAAe,KAAMK,aAAoBL,GAAgB,MAAM,IAAIM,UAAU,qCAEhH,IAAIC,OAAS,CAAC,gBACVC,OAAS,eACTC,QAAU,EAEVC,WAAa,KACbC,MAAQ,KAERC,kBAAoB,WACpB,SAASA,IAGL,MAFAR,gBAAgBS,KAAMD,GAEhB,IAAIE,MAAM,qEAyDpB,OAtDA3B,aAAayB,EAAmB,KAAM,CAAC,CACnCb,IAAK,gBACLgB,MAAO,WACH,OAAO,IAAIC,QAAQ,SAAUC,EAASC,GAElC,IAAIC,EAAcC,OAAOC,UAAUC,KAAKd,OAAQC,SAEhDU,EAAYI,gBAAkB,SAAUC,GACpCZ,EAAkBa,cAAcD,EAAEnC,OAAOqC,SAG7CP,EAAYQ,UAAY,SAAUH,GAEzBd,aAEDA,WAAac,EAAEnC,OAAOqC,OAEtBf,MAAQD,WAAWC,MAAMiB,KAAKlB,YAC9BA,WAAWC,MAAQ,WACf,MAAM,IAAIG,MAAM,kGAGxBG,EAAQP,aAGZS,EAAYU,QAAU,SAAUL,GAC5BM,QAAQC,IAAIP,EAAEnC,OAAO2C,OACrBd,EAAOM,EAAEnC,OAAO2C,MAAMC,WAInC,CACClC,IAAK,gBACLgB,MAAO,SAAuBL,GAE1BH,OAAO2B,QAAQ,SAAUC,GACjBzB,EAAW0B,iBAAiBC,SAAS9B,SACrCG,EAAW4B,kBAAkBH,GAGjCzB,EAAW6B,kBAAkBJ,EAAO,CAAEK,eAAe,QAG9D,CACCzC,IAAK,kBACLgB,MAAO,WACEL,aAGLC,QACAD,WAAa,UAIdE,EA7Da","file":"ConnectionFactory.js","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar stores = ['calculations'];\nvar dbName = 'vanillaframe';\nvar version = 2;\n\nvar connection = null;\nvar close = null;\n\nvar ConnectionFactory = function () {\n    function ConnectionFactory() {\n        _classCallCheck(this, ConnectionFactory);\n\n        throw new Error('Cannot instantiate ConnectionFactory because it is a static class');\n    }\n\n    _createClass(ConnectionFactory, null, [{\n        key: 'getConnection',\n        value: function getConnection() {\n            return new Promise(function (resolve, reject) {\n\n                var openRequest = window.indexedDB.open(dbName, version);\n\n                openRequest.onupgradeneeded = function (e) {\n                    ConnectionFactory._createStores(e.target.result);\n                };\n\n                openRequest.onsuccess = function (e) {\n\n                    if (!connection) {\n\n                        connection = e.target.result;\n\n                        close = connection.close.bind(connection);\n                        connection.close = function () {\n                            throw new Error('You can only close the connection directly by the function ConnectionFactory.closeConnection');\n                        };\n                    }\n                    resolve(connection);\n                };\n\n                openRequest.onerror = function (e) {\n                    console.log(e.target.error);\n                    reject(e.target.error.name);\n                };\n            });\n        }\n    }, {\n        key: '_createStores',\n        value: function _createStores(connection) {\n\n            stores.forEach(function (store) {\n                if (connection.objectStoreNames.contains(stores)) {\n                    connection.deleteObjectStore(store);\n                }\n\n                connection.createObjectStore(store, { autoIncrement: true });\n            });\n        }\n    }, {\n        key: 'closeConnection',\n        value: function closeConnection() {\n            if (!connection) {\n                return;\n            }\n            close();\n            connection = null;\n        }\n    }]);\n\n    return ConnectionFactory;\n}();"]}